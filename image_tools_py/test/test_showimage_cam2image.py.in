# Copyright 2019 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import io
import os
import time
import unittest

from launch import LaunchDescription
from launch import LaunchService
import launch.actions
import launch.event_handlers
import launch.events


# TODO(clalancette): we can't use launch_testing since there is currently no
# integration with pure python setup.py.  Once we have a solution for
# https://github.com/ros2/launch/issues/237, we should revisit this.
class TestExecutablesDemo(unittest.TestCase):

    def __init__(self, name):
        super().__init__(name)
        self._start_time = time.time()
        self._ls = LaunchService()
        self._ls.include_launch_description(self.generate_launch_description())
        self._saw_cam2image_output = False
        self._saw_showimage_output = False
        # Windows can emit partial lines, so buffer the data and only check
        # check when we have a complete line
        self._cam2image_buffer = io.StringIO()
        self._showimage_buffer = io.StringIO()

    def generate_launch_description(self):
        launch_description = LaunchDescription()
        publisher_executable_args = ['-r', '1', '-s', '0', '-b', '-f', '5']
        subscriber_executable_args = ['-r', '1', '-s', '0']

        env = dict(os.environ)
        env['PYTHONUNBUFFERED'] = '1'
        env['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE
        # bare minimum formatting for console output matching
        env['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'
        env['RMW_IMPLEMENTATION'] = r'@RMW_IMPLEMENTATION@'

        # Launch the process that will receive the images.
        # This is the process that gets to decide when to tear the launcher down.
        # It will exit when the regex for receiving images is matched.
        showimage_executable = r'@RCLPY_DEMO_SHOWIMAGE_EXE@'  # noqa: E501
        showimage_name = 'test_showimage_py'

        command = [showimage_executable]
        command.extend(subscriber_executable_args)
        showimage_process = launch.actions.ExecuteProcess(
            cmd=command,
            name=showimage_name,
            env=env,
            output='screen'
        )
        launch_description.add_action(showimage_process)

        # Launch the process that will publish the images.
        # This process will be exited when the launcher is torn down.
        cam2image_executable = r'@RCLPY_DEMO_CAM2IMAGE_EXE@'  # noqa: E501
        cam2image_name = 'test_cam2image_py'

        command = [cam2image_executable]
        command.extend(publisher_executable_args)
        cam2image_process = launch.actions.ExecuteProcess(
            cmd=command,
            name=cam2image_name,
            env=env,
            output='screen'
        )
        launch_description.add_action(cam2image_process)

        launch_description.add_action(
            launch.actions.RegisterEventHandler(
                launch.event_handlers.OnProcessIO(
                    on_stdout=self.append,
                    on_stderr=self.append,
                )
            )
        )

        launch_description.add_action(
            launch.actions.TimerAction(
                period=10.0,
                actions=[launch.actions.Shutdown(reason='Timer expired')])
        )

        return launch_description

    def append_and_check(self, process_io, process_name, text_to_check):
        if process_name in process_io.process_name:
            buffer = getattr(self, '_' + process_name + '_buffer')
            buffer.write(process_io.text.decode(errors='replace'))
            buffer.seek(0)
            last_line = None
            for line in buffer:
                # Note that this does not use os.linesep; apparently rclpy
                # node.get_logger().info doesn't use the OS line separator
                if line.endswith('\n'):
                    # We have a complete line, see if it has what we want
                    if text_to_check in line[:-len(os.linesep)]:
                        setattr(self, '_saw_' + process_name + '_output', True)
                        break
                else:
                    last_line = line
                    break
            buffer.seek(0)
            buffer.truncate(0)
            if last_line is not None:
                buffer.write(last_line)

    def append(self, process_io):
        self.append_and_check(process_io, 'cam2image', 'Publishing image #')
        self.append_and_check(process_io, 'showimage', 'Received image #')

        if self._saw_cam2image_output and self._saw_showimage_output:
            # We've seen all required arguments from the test, quit
            return launch.actions.EmitEvent(
                event=launch.events.Shutdown(reason='finished', due_to_sigint=False)
            )

    def test_reliable_qos(self):
        self._ls.run()
        self.assertTrue(self._saw_cam2image_output and self._saw_showimage_output)
