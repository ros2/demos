import os

from launch import LaunchDescriptor
from launch.exit_handler import ignore_exit_handler
from launch.launcher import DefaultLauncher
from launch.output_handler import ConsoleOutput

from launch_testing import create_handler


def setup():
    os.environ['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE


def test_executable():
    output_handlers = []

    launch_descriptor = LaunchDescriptor()

    pendulum_logger_executable = '@RCLCPP_DEMO_PENDULUM_LOGGER_EXECUTABLE@'
    pendulum_logger_output_file = '@RCLCPP_DEMO_PENDULUM_LOGGER_EXPECTED_OUTPUT@'
    pendulum_logger_name = 'test_executable_0'
    pendulum_logger_handler = create_handler(pendulum_logger_name, launch_descriptor, pendulum_logger_output_file)
    assert pendulum_logger_handler, 'Cannot find appropriate handler for %s' % pendulum_logger_output_file
    output_handlers.append(pendulum_logger_handler)
    launch_descriptor.add_process(
        cmd=[pendulum_logger_executable],
        name=pendulum_logger_name,
        exit_handler=ignore_exit_handler,
        output_handlers=[pendulum_logger_handler, ConsoleOutput()],
    )

    pendulum_demo_executable = '@RCLCPP_DEMO_PENDULUM_DEMO_EXECUTABLE@'
    pendulum_demo_output_file = '@RCLCPP_DEMO_PENDULUM_DEMO_EXPECTED_OUTPUT@'
    pendulum_demo_name = 'test_executable_1'
    pendulum_demo_handler = create_handler(pendulum_demo_name, launch_descriptor, pendulum_demo_output_file)
    assert pendulum_demo_handler, 'Cannot find appropriate handler for %s' % pendulum_demo_output_file
    output_handlers.append(pendulum_demo_handler)
    launch_descriptor.add_process(
        cmd=[pendulum_demo_executable, '-i', '1000'],
        name=pendulum_demo_name,
        exit_handler=ignore_exit_handler,
        output_handlers=[pendulum_demo_handler, ConsoleOutput()],
    )

    launcher = DefaultLauncher()
    launcher.add_launch_descriptor(launch_descriptor)
    rc = launcher.launch()

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. "

    for handler in output_handlers:
        handler.check()

if __name__ == '__main__':
    test_executable()
