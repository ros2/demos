# generated from pendulum_control/test/test_pendulum_demo.py.in
# generated code does not contain a copyright notice

import os

from launch.legacy import LaunchDescriptor
from launch.legacy.exit_handler import ignore_exit_handler
from launch.legacy.launcher import DefaultLauncher
from launch.legacy.output_handler import ConsoleOutput

from launch_testing import create_handler
from launch_testing import get_default_filtered_prefixes


def setup():
    os.environ['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE
    # bare minimum formatting for console output matching
    os.environ['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'
    # force flush of the stdout buffer.
    # this ensures a correct sync of prints from processes executed within the launch file.
    os.environ['RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED'] = '1'


def test_executable():
    output_handlers = []

    launch_descriptor = LaunchDescriptor()

    rmw_implementation = '@rmw_implementation@'
    pendulum_logger_executable = '@RCLCPP_DEMO_PENDULUM_LOGGER_EXECUTABLE@'
    pendulum_logger_output_file = '@RCLCPP_DEMO_PENDULUM_LOGGER_EXPECTED_OUTPUT@'
    pendulum_logger_name = 'pendulum_logger'
    pendulum_logger_handler = create_handler(
        pendulum_logger_name, launch_descriptor, pendulum_logger_output_file)
    assert pendulum_logger_handler, \
        'Cannot find appropriate handler for %s' % pendulum_logger_output_file
    output_handlers.append(pendulum_logger_handler)
    launch_descriptor.add_process(
        cmd=[pendulum_logger_executable],
        name=pendulum_logger_name,
        exit_handler=ignore_exit_handler,
        output_handlers=[pendulum_logger_handler, ConsoleOutput()],
    )

    pendulum_demo_executable = '@RCLCPP_DEMO_PENDULUM_DEMO_EXECUTABLE@'
    pendulum_demo_output_file = '@RCLCPP_DEMO_PENDULUM_DEMO_EXPECTED_OUTPUT@'
    pendulum_demo_name = 'pendulum_demo'

    filtered_prefixes = get_default_filtered_prefixes()
    if rmw_implementation.startswith('rmw_connext'):
        # This output can be caused by a small QoS depth leading to samples being discarded.
        # Since we are optimizing for performance with a depth of 1, we can ignore it.
        filtered_prefixes.append(
            b'PRESWriterHistoryDriver_completeBeAsynchPub:!make_sample_reclaimable'
        )

    pendulum_demo_handler = create_handler(
        pendulum_demo_name, launch_descriptor, pendulum_demo_output_file,
        exit_on_match=False,  # the process will exit automatically after a set number of iterations
        filtered_prefixes=filtered_prefixes,
        filtered_rmw_implementation=rmw_implementation)
    assert pendulum_demo_handler, \
        'Cannot find appropriate handler for %s' % pendulum_demo_output_file
    output_handlers.append(pendulum_demo_handler)
    launch_descriptor.add_process(
        cmd=[pendulum_demo_executable, '-i', '1000'],
        name=pendulum_demo_name,
        exit_handler=ignore_exit_handler,
        output_handlers=[pendulum_demo_handler, ConsoleOutput()],
    )

    launcher = DefaultLauncher()
    launcher.add_launch_descriptor(launch_descriptor)
    rc = launcher.launch()

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. "

    for handler in output_handlers:
        handler.check()


if __name__ == '__main__':
    test_executable()
