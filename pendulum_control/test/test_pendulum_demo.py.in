# generated from pendulum_control/test/test_pendulum_demo.py.in
# generated code does not contain a copyright notice

import os

from launch import LaunchDescription
from launch import LaunchService
from launch.actions import ExecuteProcess
from launch_testing import LaunchTestService
from launch_testing.output import create_output_lines_filter
from launch_testing.output import create_output_test_from_file
from launch_testing.output import get_default_filtered_prefixes


def setup():
    os.environ['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE
    # bare minimum formatting for console output matching
    os.environ['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'
    # force flush of the stdout buffer.
    # this ensures a correct sync of prints from processes executed within the launch file.
    os.environ['RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED'] = '1'


def test_executable():
    launch_test = LaunchTestService()
    launch_description = LaunchDescription()

    rmw_implementation = '@rmw_implementation@'
    pendulum_logger_executable = '@RCLCPP_DEMO_PENDULUM_LOGGER_EXECUTABLE@'
    pendulum_logger_output_file = '@RCLCPP_DEMO_PENDULUM_LOGGER_EXPECTED_OUTPUT@'
    pendulum_logger_name = 'pendulum_logger'

    action = launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[pendulum_logger_executable],
            name=pendulum_logger_name,
            output='screen'
        ), exit_allowed=True
    )
    launch_test.add_output_test(
        launch_description, action,
        output_test=create_output_test_from_file(pendulum_logger_output_file),
    )

    pendulum_demo_executable = '@RCLCPP_DEMO_PENDULUM_DEMO_EXECUTABLE@'
    pendulum_demo_output_file = '@RCLCPP_DEMO_PENDULUM_DEMO_EXPECTED_OUTPUT@'
    pendulum_demo_name = 'pendulum_demo'

    filtered_prefixes = get_default_filtered_prefixes()
    if rmw_implementation.startswith('rmw_connext'):
        # This output can be caused by a small QoS depth leading to samples being discarded.
        # Since we are optimizing for performance with a depth of 1, we can ignore it.
        filtered_prefixes.append(
            b'PRESWriterHistoryDriver_completeBeAsynchPub:!make_sample_reclaimable'
        )

    action = launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=[pendulum_demo_executable, '-i', '1000'],
            name=pendulum_demo_name,
            output='screen'
        )
    )
    launch_test.add_output_test(
        launch_description, action,
        output_test=create_output_test_from_file(pendulum_demo_output_file),
        output_filter=create_output_lines_filter(
            filtered_prefixes=filtered_prefixes,
            filtered_rmw_implementation=rmw_implementation
        )
    )

    launch_service = LaunchService(debug=True)
    launch_service.include_launch_description(launch_description)
    rc = launch_test.run(launch_service)

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. "


if __name__ == '__main__':
    test_executable()
