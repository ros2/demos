# generated from pendulum_control/test/test_pendulum_teleop.py.in
# generated code does not contain a copyright notice

import os
import sys

from launch import LaunchDescriptor
from launch.exit_handler import ignore_exit_handler
from launch.launcher import DefaultLauncher
from launch.output_handler import ConsoleOutput

from launch_testing import create_handler
from launch_testing import get_default_filtered_prefixes


def setup():
    os.environ['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE


def test_executable():
    output_handlers = []

    launch_descriptor = LaunchDescriptor()

    rmw_implementation = '@rmw_implementation@'
    pendulum_demo_executable = '@RCLCPP_DEMO_PENDULUM_DEMO_EXECUTABLE@'
    pendulum_demo_output_file = '@RCLCPP_DEMO_PENDULUM_DEMO_TELEOP_EXPECTED_OUTPUT@'
    pendulum_demo_name = 'pendulum_demo'
    pendulum_demo_handler = create_handler(pendulum_demo_name, launch_descriptor, pendulum_demo_output_file)
    assert pendulum_demo_handler, 'Cannot find appropriate handler for %s' % pendulum_demo_output_file
    output_handlers.append(pendulum_demo_handler)
    launch_descriptor.add_process(
        cmd=[pendulum_demo_executable, '-i', '0'],
        name=pendulum_demo_name,
        exit_handler=ignore_exit_handler,
        output_handlers=[pendulum_demo_handler, ConsoleOutput()],
    )

    pendulum_teleop_executable = '@RCLCPP_DEMO_PENDULUM_TELEOP_EXECUTABLE@'
    pendulum_teleop_output_file = '@RCLCPP_DEMO_PENDULUM_TELEOP_EXPECTED_OUTPUT@'
    pendulum_teleop_name = 'pendulum_teleop'

    filtered_prefixes = get_default_filtered_prefixes()
    if rmw_implementation.startswith('rmw_connext'):
        # This output can be caused by a small QoS depth leading to samples being discarded.
        # Since we are optimizing for performance with a depth of 1, we can ignore it.
        filtered_prefixes.append(
            b'PRESWriterHistoryDriver_completeBeAsynchPub:!make_sample_reclaimable'
        )

    pendulum_teleop_handler = create_handler(
        pendulum_teleop_name, launch_descriptor, pendulum_teleop_output_file,
        filtered_prefixes=filtered_prefixes,
        filtered_rmw_implementation=rmw_implementation)
    assert pendulum_teleop_handler, 'Cannot find appropriate handler for %s' % pendulum_teleop_output_file
    output_handlers.append(pendulum_teleop_handler)
    execute_with_delay_command = os.path.join(
        os.path.abspath(os.path.dirname(__file__)), 'execute_with_delay.py')

    launch_descriptor.add_process(
        cmd=[sys.executable, execute_with_delay_command, '500', pendulum_teleop_executable, '100'],
        name=pendulum_teleop_name,
        exit_handler=ignore_exit_handler,
        output_handlers=[pendulum_teleop_handler, ConsoleOutput()],
    )

    launcher = DefaultLauncher()
    launcher.add_launch_descriptor(launch_descriptor)
    rc = launcher.launch()

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. " \
        'Maybe the client did not receive any messages?'

    for handler in output_handlers:
        handler.check()

if __name__ == '__main__':
    test_executable()
