# Copyright 2016 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from launch.legacy import LaunchDescriptor
from launch.legacy.exit_handler import default_exit_handler
from launch.legacy.exit_handler import exit_on_error_exit_handler
from launch.legacy.launcher import DefaultLauncher
from launch.legacy.output_handler import ConsoleOutput
from launch_testing import create_handler


def test_api_srv_composition_client_first():
    # This is a regression test to ensure that the client starting first and waiting for a service
    # does not block the executor from processing requests to load other components.
    name = 'test_api_composition'
    executable = '@API_COMPOSITION_EXECUTABLE@'
    additional_processes = [
        {
            'cmd': [
                '@API_COMPOSITION_CLI_EXECUTABLE@',
                'composition', 'composition::Client'],
            'name': 'load_client_component',
            'exit_handler': exit_on_error_exit_handler,
        },
        {
            'cmd': [
                '@API_COMPOSITION_CLI_EXECUTABLE@',
                'composition', 'composition::Server', '--delay', '5000'],
            'name': 'load_server_component',
            'exit_handler': exit_on_error_exit_handler,
        },
    ]
    output_file = '@EXPECTED_OUTPUT_SRV@'
    launch(name, [executable], output_file, additional_processes=additional_processes)


def launch(name, cmd, output_file, additional_processes=None):
    launch_descriptor = LaunchDescriptor()

    rmw_implementation = '@rmw_implementation@'
    handler = create_handler(
        name, launch_descriptor, output_file,
        filtered_rmw_implementation=rmw_implementation)
    assert handler, 'Cannot find appropriate handler for %s' % output_file
    launch_descriptor.add_process(
        cmd=cmd,
        name=name,
        exit_handler=default_exit_handler,
        output_handlers=[ConsoleOutput(), handler],
    )
    for additional_process in (additional_processes or []):
        launch_descriptor.add_process(**additional_process)

    launcher = DefaultLauncher()
    launcher.add_launch_descriptor(launch_descriptor)
    rc = launcher.launch()

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. " \
        'Maybe the client did not receive any messages?'

    handler.check()


if __name__ == '__main__':
    test_api_srv_composition_client_first()
