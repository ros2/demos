# Copyright 2016 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from launch import LaunchDescription
from launch import LaunchService
from launch.actions import ExecuteProcess
from launch_testing import LaunchTestService
from launch_testing.output import create_output_lines_filter
from launch_testing.output import create_output_test_from_file


def test_dlopen_composition():
    name = 'test_dlopen_composition'
    executable = '@DLOPEN_COMPOSITION_EXECUTABLE@'
    talker_library = '@TALKER_LIBRARY@'
    listener_library = '@LISTENER_LIBRARY@'
    server_library = '@SERVER_LIBRARY@'
    client_library = '@CLIENT_LIBRARY@'
    output_file = '@EXPECTED_OUTPUT_ALL@'
    launch(
        name,
        [executable, talker_library, listener_library, server_library, client_library],
        output_file)


def launch(name, cmd, output_file, additional_processes=None):
    launch_test = LaunchTestService()
    launch_description = LaunchDescription()

    action = launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=cmd,
            name=name,
            output='screen'
        )
    )
    rmw_implementation = '@rmw_implementation@'
    launch_test.add_output_test(
        launch_description, action,
        output_test=create_output_test_from_file(output_file),
        output_filter=create_output_lines_filter(
            filtered_rmw_implementation=rmw_implementation
        )
    )
    for additional_process in (additional_processes or []):
        launch_test.add_fixture_action(
            launch_description, ExecuteProcess(**additional_process)
        )

    launch_service = LaunchService()
    launch_service.include_launch_description(launch_description)
    rc = launch_test.run(launch_service)

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. " \
        'Maybe the client did not receive any messages?'


if __name__ == '__main__':
    test_dlopen_composition()
