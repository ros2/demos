# generated from demo_nodes_cpp/test/test_executables_tutorial.py.in
# generated code does not contain a copyright notice

import os
import time

import unittest

from launch import LaunchDescription
from launch.actions import ExecuteProcess

import launch_testing
import launch_testing.actions
import launch_testing.asserts
import launch_testing.util
import launch_testing_ros


def generate_test_description():
    env = os.environ.copy()
    # bare minimum formatting for console output matching
    env['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'

    launch_description = LaunchDescription()

    processes_under_test = []
    exes_and_params = '@DEMO_NODES_CPP_EXECUTABLE@'.split(';')
    for i, exe_and_params in enumerate(exes_and_params):
        tmp = exe_and_params.split('@')
        cmd = [tmp[0]]
        if len(tmp) > 1:
            cmd.append('--ros-args')
            for p in tmp[1:]:
                cmd.append('-p')
                cmd.append(p.replace('=', ':='))

        processes_under_test.append(
            ExecuteProcess(
                cmd=cmd,
                name='test_executable_' + str(i),
                output='screen',
                env=env,
            )
        )

    for process in processes_under_test:
        launch_description.add_action(process)
    launch_description.add_action(launch_testing.util.KeepAliveProc())
    launch_description.add_action(
        launch_testing.actions.ReadyToTest()
    )
    return launch_description, locals()


class TestExecutablesTutorial(unittest.TestCase):

    def test_processes_output(self, proc_output, processes_under_test):
        """Test all processes output against expectations."""
        from launch_testing.tools.output import get_default_filtered_prefixes
        output_filter = launch_testing_ros.tools.basic_output_filter(
            filtered_prefixes=get_default_filtered_prefixes() + [
                'service not available, waiting again...'
            ],
            filtered_rmw_implementation='@rmw_implementation@'
        )
        output_files = '@DEMO_NODES_CPP_EXPECTED_OUTPUT@'.split(';')
        for process, output_file in zip(processes_under_test, output_files):
            # Some DDS features (e.g content filter) might not be implemented in all DDS,
            # the different outputs are expected by different rmw_implementations.
            special_output = output_file + '-@rmw_implementation@'
            if os.path.isfile(special_output + '.txt'):
              output_file = special_output

            proc_output.assertWaitFor(
                expected_output=launch_testing.tools.expected_output_from_file(
                    path=output_file
                ), process=process, output_filter=output_filter, timeout=30
            )

            # Wait up to 5 seconds for the process to quit cleanly
            tries = 50
            while process.return_code is None and tries > 0:
                time.sleep(0.1)
                tries -= 1

@launch_testing.post_shutdown_test()
class TestExecutablesTutorialAfterShutdown(unittest.TestCase):

    def test_last_process_exit_code(self, proc_info, processes_under_test):
        """Test last process exit code."""
        launch_testing.asserts.assertExitCodes(
            proc_info,
            process=processes_under_test[-1]
        )
