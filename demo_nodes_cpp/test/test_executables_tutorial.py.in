# generated from demo_nodes_cpp/test/test_executables_tutorial.py.in
# generated code does not contain a copyright notice

import os

from launch import LaunchDescription
from launch import LaunchService
from launch.actions import ExecuteProcess
from launch_testing import LaunchTestService
from launch_testing.output import create_output_lines_filter
from launch_testing.output import create_output_test_from_file
from launch_testing.output import get_default_filtered_prefixes


def setup():
    os.environ['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE
    # bare minimum formatting for console output matching
    os.environ['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'


def test_executable():
    launch_test = LaunchTestService()
    launch_description = LaunchDescription()

    rmw_implementation = '@rmw_implementation@'
    executables = '@DEMO_NODES_CPP_EXECUTABLE@'.split(';')
    output_files = '@DEMO_NODES_CPP_EXPECTED_OUTPUT@'.split(';')
    output_filter = create_output_lines_filter(
        filtered_prefixes=get_default_filtered_prefixes() + [
            b'service not available, waiting again...'
        ],
        filtered_rmw_implementation=rmw_implementation
    )
    for i, (exe, output_file) in enumerate(zip(executables, output_files)):
        name = 'test_executable_' + str(i)
        # The last executable is taken to be the test program (the one whose
        # output check can make the decision to shut everything down)
        is_last_executable = (i == (len(executables) - 1))

        action = launch_test.add_fixture_action(
            launch_description, ExecuteProcess(
                cmd=[exe],
                name=name,
                output='screen'
            ), exit_allowed=[0] if is_last_executable else True
        )
        launch_test.add_output_test(
            launch_description, action,
            output_test=create_output_test_from_file(output_file),
            output_filter=output_filter,
            side_effect='shutdown' if is_last_executable else None
        )

    launch_service = LaunchService()
    launch_service.include_launch_description(launch_description)
    rc = launch_test.run(launch_service)

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. " \
        'Maybe the client did not receive any messages?'


if __name__ == '__main__':
    test_executable()
