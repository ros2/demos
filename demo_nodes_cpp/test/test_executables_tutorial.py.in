# generated from demo_nodes_cpp/test/test_executables_tutorial.py.in
# generated code does not contain a copyright notice

import os

import unittest

from launch import LaunchDescription
from launch.actions import ExecuteProcess
from launch.actions import OpaqueFunction

import launch_testing
import launch_testing.asserts
import launch_testing_ros


def generate_test_description(ready_fn):
    os.environ['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE
    # bare minimum formatting for console output matching
    os.environ['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'

    launch_description = LaunchDescription()
    processes_under_test = [
        ExecuteProcess(cmd=[executable], name='test_executable_' + str(i), output='screen')
        for i, executable in enumerate('@DEMO_NODES_CPP_EXECUTABLE@'.split(';'))
    ]
    for process in processes_under_test:
        launch_description.add_action(process)
    launch_description.add_action(
        OpaqueFunction(function=lambda context: ready_fn())
    )
    return launch_description, locals()


class TestExecutablesTutorial(unittest.TestCase):

    def test_processes_output(self, processes_under_test):
        """Test all processes output against expectations."""
        from launch_testing.tools.output import get_default_filtered_prefixes
        output_filter = launch_testing_ros.tools.basic_output_filter(
            filtered_prefixes=get_default_filtered_prefixes() + [
                'service not available, waiting again...'
            ],
            filtered_rmw_implementation='@rmw_implementation@'
        )
        output_files = '@DEMO_NODES_CPP_EXPECTED_OUTPUT@'.split(';')
        for process, output_file in zip(processes_under_test, output_files):
            self.proc_output.assertWaitFor(
                expected_output=launch_testing.tools.expected_output_from_file(
                    path=output_file
                ), process=process, output_filter=output_filter, timeout=10
            )


@launch_testing.post_shutdown_test()
class TestExecutablesTutorialAfterShutdown(unittest.TestCase):

    def test_last_process_exit_code(self, processes_under_test):
        """Test last process exit code."""
        # TODO(hidmic): fail the test on a nonzero exit code.
        #               Currently pre shutdown tests are terminating too soon and
        #               the signal seems to be sent in the middle of the fixture
        #               nodes' shutdown (for those that shutdown themselves) and
        #               these are not handling this situation gracefully. If pre
        #               shutdown test termination is delayed instead, the testing
        #               framework complains about the launch run terminating before
        #               tests are done.
        #
        # launch_testing.asserts.assertExitCodes(
        #     self.proc_info,
        #     process=processes_under_test[-1]
        # )
