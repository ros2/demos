# generated from intra_process_demo/test/test_executables_demo.py.in
# generated code does not contain a copyright notice

import os

from launch import LaunchDescriptor
from launch.exit_handler import ignore_exit_handler
from launch.launcher import DefaultLauncher
from launch.output_handler import ConsoleOutput
from launch_testing import create_handler


def setup():
    os.environ['OSPL_VERBOSITY'] = '8'  # 8 = OS_NONE
    # bare minimum formatting for console output matching
    os.environ['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'


def test_executable():
    output_handlers = []

    launch_descriptor = LaunchDescriptor()

    executables = '@RCLCPP_DEMOS_EXECUTABLE@'.split(';')
    output_files = '@RCLCPP_DEMOS_EXPECTED_OUTPUT@'.split(';')
    for i, (exe, output_file) in enumerate(zip(executables, output_files)):
        name = 'test_executable_' + str(i)
        handler = create_handler(name, launch_descriptor, output_file)
        assert handler, 'Cannot find appropriate handler for %s' % output_file
        output_handlers.append(handler)
        launch_descriptor.add_process(
            cmd=[exe, 'test_executable'],
            name=name,
            exit_handler=ignore_exit_handler,
            output_handlers=[ConsoleOutput(), handler],
        )

    launcher = DefaultLauncher()
    launcher.add_launch_descriptor(launch_descriptor)
    rc = launcher.launch()

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. " \
        'Maybe the client did not receive any messages?'

    for handler in output_handlers:
        handler.check()


if __name__ == '__main__':
    test_executable()
